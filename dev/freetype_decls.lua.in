local ffi=require"ffi"

local assert = assert
local tonumber = tonumber

----------

ffi.cdef[[
@@ -w TypedefDecl -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Error$ -p ^FT_Library$ -p ^FT_Face$ \
    -p ^FT_Int$ -p ^FT_Int32$ -p ^FT_Long$ -p ^FT_UInt$ -p ^FT_ULong$ -p ^FT_F26Dot6$ \
    -p ^FT_Short$ -p ^FT_UShort$ -p ^FT_Size$ \
    -p ^FT_GlyphSlot$ -p ^FT_Fixed$ -p ^FT_SubGlyph$ -p ^FT_Slot_Internal$ \
    -p ^FT_Pos$ -p ^FT_String$ -p ^FT_CharMap$ -p ^FT_Face_Internal$

typedef struct
@@ -m ljclang.dev.exdecl_struct_def -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Bitmap_$
FT_Bitmap;

typedef
@@ -m ljclang.dev.exdecl_surrogate_struct -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Generic$
FT_Generic;

typedef struct
@@ -m ljclang.dev.exdecl_struct_def -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Glyph_Metrics_$
FT_Glyph_Metrics;

typedef
@@ -m ljclang.dev.exdecl_surrogate_struct -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Outline$
FT_Outline;

typedef struct
@@ -m ljclang.dev.exdecl_struct_def -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Vector_$
FT_Vector;

typedef enum  FT_Glyph_Format_ {
@@ -w EnumConstantDecl -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_GLYPH_FORMAT_
} FT_Glyph_Format;

typedef struct
@@ -m ljclang.dev.exdecl_struct_def -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_GlyphSlotRec_$
FT_GlyphSlotRec;

typedef struct
@@ -m ljclang.dev.exdecl_struct_def -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_BBox_$
FT_BBox;

typedef struct
@@ -m ljclang.dev.exdecl_struct_def -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Bitmap_Size_$
FT_Bitmap_Size;

// ---------- BEGIN Data types of PRIVATE members

typedef
@@ -m ljclang.dev.exdecl_surrogate_struct -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Driver$
FT_Driver;

typedef
@@ -m ljclang.dev.exdecl_surrogate_struct -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Memory$
FT_Memory;

typedef
@@ -m ljclang.dev.exdecl_surrogate_struct -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Stream$
FT_Stream;

typedef
@@ -m ljclang.dev.exdecl_surrogate_struct -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_ListRec$
FT_ListRec;

// ---------- END Data types of PRIVATE members

typedef struct
@@ -m ljclang.dev.exdecl_struct_def -A -I/usr/include/freetype2 ./dev/freetype.h -p ^FT_FaceRec_$
FT_FaceRec;

typedef enum  FT_Encoding_ {
@@ -w EnumConstantDecl -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_ENCODING_
} FT_Encoding;

typedef enum  FT_Render_Mode_ {
@@ -w EnumConstantDecl -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_RENDER_MODE_
} FT_Render_Mode;

@@ -w FunctionDecl -A -I/usr/include/freetype2 ./dev/freetype.h \
    -p ^FT_Init_FreeType(.*)$ -p ^FT_New_Face(.*)$ -p ^FT_Set_Char_Size(.*)$ \
    -p ^FT_Get_Char_Index(.*)$ -p ^FT_Load_Glyph(.*)$ \
    -p ^FT_Done_FreeType(.*)$ -p ^FT_Done_Face(.*)$ -p ^FT_Select_Charmap(.*)$ -p ^FT_Render_Glyph(.*)$
]]

local is64Bit = ffi.abi("64bit")
assert(ffi.sizeof("FT_GlyphSlotRec") == (is64Bit and 304 or 160))
assert(ffi.sizeof("FT_FaceRec") == (is64Bit and 248 or 132))

return {
FT=ffi.new[[struct {
@@ -w MacroDefinition -A -I/usr/include/freetype2 ./dev/freetype.h \
    -C -p ^FT_LOAD_DEFAULT$ -s ^FT_
@@ -w EnumConstantDecl -A -I/usr/include/freetype2 ./dev/freetype.h \
    -C -p ^FT_PIXEL_MODE_GRAY$ -p ^FT_RENDER_MODE_NORMAL$ -s ^FT_
}]],
}
